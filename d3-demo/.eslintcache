[{"/Users/lius/Desktop/software/web-learning/d3-demo/src/App.js":"1","/Users/lius/Desktop/software/web-learning/d3-demo/src/index.js":"2","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/tree.js":"3","/Users/lius/Desktop/software/web-learning/d3-demo/src/static/games.js":"4","/Users/lius/Desktop/software/web-learning/d3-demo/src/reportWebVitals.js":"5","/Users/lius/Desktop/software/web-learning/d3-demo/src/static/games-copy.js":"6","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/tree2.js":"7","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/tree1.js":"8","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/circle.js":"9","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/line.js":"10","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/bar.js":"11","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/timeLine.js":"12","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/BBTimeline.js":"13","/Users/lius/Desktop/software/web-learning/d3-demo/src/hooks/useResizeObserver.js":"14","/Users/lius/Desktop/software/web-learning/d3-demo/src/hooks/useInterval.js":"15","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/barChart.js":"16","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/RacingBarChart.js":"17","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/TreeChart.js":"18"},{"size":657,"mtime":1606287390196,"results":"19","hashOfConfig":"20"},{"size":500,"mtime":1606116015688,"results":"21","hashOfConfig":"20"},{"size":2916,"mtime":1606184352376,"results":"22","hashOfConfig":"20"},{"size":6565,"mtime":1606117295621,"results":"23","hashOfConfig":"20"},{"size":362,"mtime":1606116015689,"results":"24","hashOfConfig":"20"},{"size":3381,"mtime":1606187221761,"results":"25","hashOfConfig":"20"},{"size":651,"mtime":1606285639006,"results":"26","hashOfConfig":"20"},{"size":5615,"mtime":1606188964496,"results":"27","hashOfConfig":"20"},{"size":1102,"mtime":1606200938547,"results":"28","hashOfConfig":"20"},{"size":1838,"mtime":1606204212765,"results":"29","hashOfConfig":"20"},{"size":2969,"mtime":1606272073566,"results":"30","hashOfConfig":"20"},{"size":1358,"mtime":1606272104682,"results":"31","hashOfConfig":"20"},{"size":1890,"mtime":1606287302394,"results":"32","hashOfConfig":"20"},{"size":588,"mtime":1606285461056,"results":"33","hashOfConfig":"20"},{"size":492,"mtime":1606275325558,"results":"34","hashOfConfig":"20"},{"size":1463,"mtime":1606275431968,"results":"35","hashOfConfig":"20"},{"size":1630,"mtime":1606284958381,"results":"36","hashOfConfig":"20"},{"size":2745,"mtime":1606291513476,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1txj0e2",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"/Users/lius/Desktop/software/web-learning/d3-demo/src/App.js",["81","82","83","84","85","86","87","88"],"/Users/lius/Desktop/software/web-learning/d3-demo/src/index.js",[],["89","90"],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/tree.js",["91","92","93"],"import { useRef, useEffect, useState } from \"react\"\n\nimport * as d3 from \"d3\";\n\nconst Index = props => {\n\n  const { games } = props\n  console.log(\"----\", games);\n\n  const root = useRef(null)\n  const color = useRef(null)\n  const initialSetting = useRef(null)\n\n  /**\n   * 初始化环境\n   */\n  const initial = () => {\n    const width = document.documentElement.clientWidth\n    const height = document.documentElement.clientHeight\n    const svg = d3.select(\"#mainsvg\")\n      .attr('width', width)\n      .attr('height', height)\n    const margin = { top: 50, right: 150, bottom: 50, left: 60 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const g = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n    initialSetting.current = {\n      innerWidth,\n      innerHeight,\n      g\n    }\n  }\n\n  /**\n   * 读取数据\n   */\n  const readData = () => {\n    const { innerHeight, innerWidth } = initialSetting.current\n    // 数据预处理\n    root.current = d3.hierarchy(games)\n    root.current = d3.tree().size([innerHeight, innerWidth])(root.current);\n    root.current.descendants().forEach((d, i) => {\n      d.id = i;\n      d._children = d.children;\n      if (d.depth === 1) d.children = null;\n    });\n    renderTree()\n  }\n\n  /**\n   * 渲染数据\n   */\n  const renderTree = () => {\n    const { g } = initialSetting.current\n    color.current = d3.scaleOrdinal()\n      .domain(root.current.descendants().filter(d => d.depth <= 1).map(d => d.data.name))\n      .range(d3.schemeCategory10)\n\n    // 画线\n    g.selectAll(\"path\")\n      .data(root.current.links())\n      .join(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"d\", d3.linkHorizontal().x(d => d.y).y(d => d.x));\n\n    // 画点\n    g.selectAll('circle')\n      .data(root.current.descendants()).join('circle')\n      .attr('cx', d => d.y)\n      .attr('cy', d => d.x)\n      .attr('stroke-width', 3)\n      .attr('r', 6)\n      .attr('fill', fill)\n      .on(\"click\", d => {\n        d.children = d.children ? null : d._children\n        renderTree();\n      });\n\n    // 显示文字\n    g.selectAll('text')\n      .data(root.current.descendants()).join('text')\n      .attr('font-size', '1em')\n      .attr('text-anchor', d => d.children ? 'end' : 'start')\n      .attr('x', d => (d.children ? -6 : 6) + d.y)\n      .attr('y', d => d.x + 6)\n      .text(d => d.data.name)\n\n  }\n\n  const fill = (d) => {\n    if (d.depth === 0) {\n      return color.current(d.data.name)\n    }\n    while (d.depth > 1) {\n      d = d.parent\n    }\n    return color.current(d.data.name)\n  }\n\n\n  useEffect(() => {\n    initial();\n    readData()\n  }, []);\n\n  useEffect(() => {\n    readData()\n  }, [games])\n\n\n  return (\n    <svg id=\"mainsvg\" className=\"svgs\"\n      style={{ display: 'block', margin: 'auto' }} />\n  )\n}\n\nexport default Index","/Users/lius/Desktop/software/web-learning/d3-demo/src/static/games.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/reportWebVitals.js",[],["94","95"],"/Users/lius/Desktop/software/web-learning/d3-demo/src/static/games-copy.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/tree2.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/tree1.js",["96","97","98","99","100"],"import { useRef, useEffect, useState } from \"react\"\nconst d3 = require(\"d3\")\n\nconst width = document.documentElement.clientWidth;\nconst height = document.documentElement.clientHeight;\nconst dx = 10;\nconst dy = 159;\nconst margin = { top: 10, right: 120, bottom: 10, left: 40 }\n\n\nconst Index = props => {\n\n  const { data } = props\n\n  const root = useRef(null)\n  const svg = useRef(null)\n  const gLink = useRef(null)\n  const gNode = useRef(null)\n\n  const color = useRef(null)\n  const initialSetting = useRef(null)\n\n  /**\n   * 初始化环境\n   */\n  const initial = () => {\n\n\n    // document.getElementById('d3Tree').append(svg.current.node());\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    initialSetting.current = {\n      innerWidth,\n      innerHeight,\n    }\n  }\n\n  /**\n   * 读取数据\n   */\n  const readData = () => {\n    //   root.current = null;\n    //   svg.current = null;\n    //   gLink.current = null;\n    //   gNode.current = null;\n\n    // console.log(\"svg\", svg.current);\n\n    // svg.current?.exit()?.remove()\n    document.getElementById('d3Tree').innerHTML = \"\"\n    \n    // d3.select(\"#d3Tree\").exit().remove()\n\n    root.current = d3.hierarchy(data);\n\n    root.current.x0 = dy / 2;\n    root.current.y0 = 0;\n\n    root.current.descendants().forEach((d, i) => {\n      d.id = i;\n      d._children = d.children;\n      if (d.depth >= 2) d.children = null;\n    });\n\n    svg.current = d3.create(\"svg\")\n      .attr(\"viewBox\", [-margin.left, -margin.top, width, dx])\n      .style(\"font\", \"10px sans-serif\")\n      .style(\"user-select\", \"none\");\n\n    gLink.current = svg.current.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-opacity\", 0.4)\n      .attr(\"stroke-width\", 1.5);\n\n    gNode.current = svg.current.append(\"g\")\n      .attr(\"cursor\", \"pointer\")\n      .attr(\"pointer-events\", \"all\");\n\n    update(root.current)\n\n    document.getElementById('d3Tree').append(svg.current.node());\n    // document.getElementById('d3Tree').style.display = 'block'\n  }\n\n  const tree = d3.tree().nodeSize([dx, dy])\n\n  const diagonal = d3.linkHorizontal().x(d => d.y).y(d => d.x)\n\n  /**\n   * 渲染数据\n   */\n  const update = (source) => {\n    const duration = d3.event && d3.event.altKey ? 2500 : 250;\n    const nodes = root.current.descendants().reverse();\n    const links = root.current.links();\n\n    // Compute the new tree layout.\n    tree(root.current);\n\n    let left = root.current;\n    let right = root.current;\n    root.current.eachBefore(node => {\n      if (node.x < left.x) left = node;\n      if (node.x > right.x) right = node;\n    });\n\n    const height = right.x - left.x + margin.top + margin.bottom;\n\n    const transition = svg.current.transition()\n      .duration(duration)\n      .attr(\"viewBox\", [-margin.left, left.x - margin.top, width, height])\n      .tween(\"resize\", window.ResizeObserver ? null : () => () => svg.current.dispatch(\"toggle\"));\n\n    // Update the nodes…\n    const node = gNode.current.selectAll(\"g\")\n      .data(nodes, d => d.id);\n\n    // Enter any new nodes at the parent's previous position.\n    const nodeEnter = node.enter().append(\"g\")\n      .attr(\"transform\", d => `translate(${source.y0},${source.x0})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0)\n      .on(\"click\", (event, d) => {\n        d.children = d.children ? null : d._children;\n        update(d);\n      });\n\n    nodeEnter.append(\"circle\")\n      .attr(\"r\", 2.5)\n      .attr(\"fill\", d => d._children ? \"#555\" : \"#999\")\n      .attr(\"stroke-width\", 10);\n\n    nodeEnter.append(\"text\")\n      .attr(\"dy\", \"0.31em\")\n      .attr(\"x\", d => d._children ? -6 : 6)\n      .attr(\"text-anchor\", d => d._children ? \"end\" : \"start\")\n      .text(d => d.data.name)\n      .clone(true).lower()\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"white\");\n\n    // Transition nodes to their new position.\n    const nodeUpdate = node.merge(nodeEnter).transition(transition)\n      .attr(\"transform\", d => `translate(${d.y},${d.x})`)\n      .attr(\"fill-opacity\", 1)\n      .attr(\"stroke-opacity\", 1);\n\n    // Transition exiting nodes to the parent's new position.\n    const nodeExit = node.exit().transition(transition).remove()\n      .attr(\"transform\", d => `translate(${source.y},${source.x})`)\n      .attr(\"fill-opacity\", 0)\n      .attr(\"stroke-opacity\", 0);\n\n    // Update the links…\n    const link = gLink.current.selectAll(\"path\")\n      .data(links, d => d.target.id);\n\n    // Enter any new links at the parent's previous position.\n    const linkEnter = link.enter().append(\"path\")\n      .attr(\"d\", d => {\n        const o = { x: source.x0, y: source.y0 };\n        return diagonal({ source: o, target: o });\n      });\n\n    // Transition links to their new position.\n    link.merge(linkEnter).transition(transition)\n      .attr(\"d\", diagonal);\n\n    // Transition exiting nodes to the parent's new position.\n    link.exit().transition(transition).remove()\n      .attr(\"d\", d => {\n        const o = { x: source.x, y: source.y };\n        return diagonal({ source: o, target: o });\n      });\n\n    // Stash the old positions for transition.\n    root.current.eachBefore(d => {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n\n  }\n\n  const fill = (d) => {\n    if (d.depth === 0) {\n      return color.current(d.data.name)\n    }\n    while (d.depth > 1) {\n      d = d.parent\n    }\n    return color.current(d.data.name)\n  }\n\n\n  useEffect(() => {\n    initial()\n  }, []);\n\n  useEffect(() => {\n    readData()\n  }, [data])\n\n\n  return (\n    <div id=\"d3Tree\" />\n  )\n}\n\nexport default Index","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/circle.js",["101","102"],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/line.js",["103","104"],"import { useRef, useState, useEffect } from 'react'\nimport { select, curveCardinal, line, scaleLinear, axisBottom, axisLeft } from 'd3'\n\nconst width = document.documentElement.clientWidth;\nconst height = document.documentElement.clientHeight;\nconst dx = 10;\nconst dy = 159;\nconst margin = { top: 120, right: 120, bottom: 120, left: 120 }\n\nconst innerWidth = width - margin.left - margin.right;\nconst innerHeight = height - margin.top - margin.bottom;\n\nconst svgStyle = {\n  width: innerWidth,\n  height: innerHeight\n}\n\nconst Index = () => {\n\n  const [data, setData] = useState([190, 400, 253, 78, 368]);\n  const svgRef = useRef()\n\n  useEffect(() => {\n    const svg = select(svgRef.current)\n\n    console.log(\"innerHeight\", innerHeight);\n\n    const xScale = scaleLinear().domain([0, data.length - 1]).range([0, innerWidth]);\n\n    const yScale = scaleLinear().domain([0, innerHeight]).range([innerHeight, 0]);\n\n    const xAxis = axisBottom(xScale).ticks(data.length).tickFormat(index => index + 1);\n\n    const yAxis = axisLeft(yScale);\n\n    const myLine = line()\n      .x((value, index) => xScale(index))\n      .y(yScale)\n      .curve(curveCardinal)\n\n    svg.selectAll(\".line\")\n      .data([data])\n      .join('path')\n      .attr(\"class\", \"line\")\n      .attr(\"d\", myLine)\n      .attr('stroke', 'blue')\n      .attr('fill', 'none')\n\n    svg\n      .append('g')\n      .attr('class', 'x-axis')\n      .style('transform', `translateY(${innerHeight}px)`)\n      .call(xAxis);\n\n    svg\n      .append(\"g\")\n      .attr('class', 'y-axis')\n      .call(yAxis);\n\n  }, [data])\n\n  return (\n    <>\n      <svg ref={svgRef} style={svgStyle} >\n        <g className='x-axis' />\n        <g className='y-axis' />\n      </svg>\n      <br /><br />\n      <button onClick={() => setData(data.map(item => item * 2))}>updata Data</button>\n    </>\n  )\n\n}\n\nexport default Index","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/bar.js",["105","106"],"import { useRef, useState, useEffect } from 'react'\nimport { select, scaleLinear, scaleBand, axisBottom, axisLeft } from 'd3'\n\nconst width = document.documentElement.clientWidth;\nconst height = document.documentElement.clientHeight;\nconst dx = 10;\nconst dy = 159;\nconst margin = { top: 120, right: 120, bottom: 120, left: 120 }\n\nconst innerWidth = width - margin.left - margin.right;\nconst innerHeight = height - margin.top - margin.bottom;\n\nconst svgStyle = {\n  width: innerWidth,\n  height: innerHeight\n}\n\nconst defaultData = [19, 40, 25, 78, 36]\n\nconst Index = () => {\n\n  const [data, setData] = useState(defaultData);\n  const svgRef = useRef()\n\n  useEffect(() => {\n    const svg = select(svgRef.current)\n\n    svg.selectAll('.axis').remove()\n    // svgRef.current.innerHTML = \"\"\n\n    const xScale = scaleBand().domain(data.map((v, i) => i)).range([0, innerWidth]).padding(0.5);\n\n    const yScale = scaleLinear().domain([0, innerHeight]).range([innerHeight, 0]);\n\n    const colorSCale = scaleLinear().domain([Math.min(...data), innerHeight]).range(['green', 'red']).clamp(true)\n\n    const xAxis = axisBottom(xScale).ticks(data.length).tickFormat(index => index + 1);\n\n    const yAxis = axisLeft(yScale);\n\n    svg\n      // .select('.x-axis')\n      .append('g')\n      .attr('class', 'axis')\n      .style('transform', `translateY(${innerHeight}px)`)\n      .call(xAxis)\n\n    svg\n      // .select(\".y-axis\")\n      .append('g')\n      .attr('class', 'axis')\n      .call(yAxis);\n\n    svg.selectAll('.bar')\n      .data(data)\n      .join('rect')\n      .attr('class', 'bar')\n      .style('transform', 'scale(1,-1)')\n      .attr('x', (value, index) => xScale(index))\n      .attr('width', xScale.bandwidth())\n      .on('mouseenter', function(e, value) {\n        const index = svg.selectAll(\".bar\").nodes().indexOf(this);\n        svg.selectAll('.tooltip')\n          .data([value])\n          .join(enter => enter.append('text').attr('y', yScale(value) - 4))\n          .attr('class', 'tooltip')\n          .text(value)\n          // .attr('x',e.offsetX)\n          .attr('x', xScale(index) + xScale.bandwidth() / 2)\n          .attr('text-anchor', 'middle')\n          .transition()\n          .attr('y', yScale(value) - 4)\n          .attr('opacity', 1)\n      })\n      .on(\"mouseleave\", () => svg.select('.tooltip').remove())\n      .attr('y', -innerHeight)\n      .transition()\n      .attr('fill', colorSCale)\n      .attr('height', v => innerHeight - yScale(v))\n      \n\n  }, [data])\n\n  return (\n    <>\n      <svg ref={svgRef} style={svgStyle} />\n\n      <br /><br />\n      <button onClick={() => setData([...data.map(item => item * 2)])}>updata Data</button>\n      <br /><br />\n      <button onClick={() => setData([...defaultData])}>reset Data</button>\n      <br /><br />\n      <button onClick={() => {\n        const randomData = Math.random() * innerHeight;\n        data.push(Math.round(randomData))\n        setData([...data])\n      }}>Add Data</button>\n    </>\n  )\n\n}\n\nexport default Index","/Users/lius/Desktop/software/web-learning/d3-demo/src/components/timeLine.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/BBTimeline.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/hooks/useResizeObserver.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/hooks/useInterval.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/barChart.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/RacingBarChart.js",[],"/Users/lius/Desktop/software/web-learning/d3-demo/src/components/base/TreeChart.js",["107","108"],"import { useEffect, useRef } from 'react'\nimport { select, hierarchy, tree, linkHorizontal } from 'd3'\nimport useResizeObserver from '../../hooks/useResizeObserver'\n\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n// dimensions\n\nexport default ({ data }) => {\n\n  const wrapperRef = useRef(null);\n  const svgRef = useRef(null)\n  const dimensions = useResizeObserver(wrapperRef)\n\n  const previouslyRenderedData = usePrevious(data)\n\n  useEffect(() => {\n\n    const svg = select(svgRef.current)\n\n    if (!dimensions) return\n\n    const { width, height } = dimensions || wrapperRef.current.getBoundingClientRect()\n\n    const root = hierarchy(data)\n    const treeLayout = tree().size([height, width])\n\n    // linkGenerator\n    const linkGenerator = linkHorizontal().x(link => link.y).y(link => link.x)\n\n    // 填充 x y 坐标\n    treeLayout(root)\n\n    // console.log(\"descendants\", root.descendants());\n    // console.log(\"links\", root.links());\n\n    // 添加节点\n    svg.selectAll('.node')\n      .data(root.descendants())\n      .join(entry => entry.append('circle').attr('opacity', 0))\n      .attr('class', 'node')\n      .attr('r', 4)\n      .attr('cx', node => node.y)\n      .attr('cy', node => node.x)\n      .transition()\n      .duration(500)\n      .delay(node => node.depth * 300)\n      .attr('opacity', 1)\n\n    // 文字\n    svg.selectAll('.label')\n      .data(root.descendants())\n      .join(entry => entry.append('text').attr('opacity', 0))\n      .attr('class', 'label')\n      .attr('y', node => node.x - 12)\n      .attr('x', node => node.y)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', 14)\n      .text(node => node.data.name)\n      .transition()\n      .duration(500)\n      .duration(500)\n      .delay(node => node.depth * 300)\n      .attr('opacity', 1)\n\n    // 连线\n    const enteringAndUpdatingLinks = svg\n      .selectAll('.link')\n      .data(root.links())\n      .join('path')\n      .attr('class', 'link')\n      .attr('d', linkGenerator)\n      .attr('stroke-dasharray', function () {\n        const lenght = this.getTotalLength()\n        return `${lenght} ${lenght}`\n      })\n      .attr('stroke', 'black')\n      .attr('fill', 'none')\n      .attr('opacity', 1)\n\n    // 判断更新\n    if (previouslyRenderedData !== data) {\n      enteringAndUpdatingLinks\n        .attr('stroke-dashoffset', function () {\n          return this.getTotalLength()\n        })\n        .transition()\n        .duration(500)\n        .delay(link => link.source.depth * 300)\n        .attr('stroke-dashoffset', 0)\n\n    }\n\n\n\n  }, [dimensions, data])\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef} />\n    </div>\n  )\n}\n\n",{"ruleId":"109","severity":1,"message":"110","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":14},{"ruleId":"109","severity":1,"message":"113","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":12},{"ruleId":"109","severity":1,"message":"114","line":6,"column":8,"nodeType":"111","messageId":"112","endLine":6,"endColumn":11},{"ruleId":"109","severity":1,"message":"115","line":7,"column":8,"nodeType":"111","messageId":"112","endLine":7,"endColumn":16},{"ruleId":"109","severity":1,"message":"116","line":8,"column":8,"nodeType":"111","messageId":"112","endLine":8,"endColumn":16},{"ruleId":"109","severity":1,"message":"117","line":10,"column":8,"nodeType":"111","messageId":"112","endLine":10,"endColumn":17},{"ruleId":"109","severity":1,"message":"118","line":14,"column":10,"nodeType":"111","messageId":"112","endLine":14,"endColumn":14},{"ruleId":"109","severity":1,"message":"119","line":14,"column":16,"nodeType":"111","messageId":"112","endLine":14,"endColumn":23},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"109","severity":1,"message":"124","line":1,"column":29,"nodeType":"111","messageId":"112","endLine":1,"endColumn":37},{"ruleId":"125","severity":1,"message":"126","line":106,"column":6,"nodeType":"127","endLine":106,"endColumn":8,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"126","line":110,"column":6,"nodeType":"127","endLine":110,"endColumn":13,"suggestions":"129"},{"ruleId":"120","replacedBy":"130"},{"ruleId":"122","replacedBy":"131"},{"ruleId":"109","severity":1,"message":"124","line":1,"column":29,"nodeType":"111","messageId":"112","endLine":1,"endColumn":37},{"ruleId":"109","severity":1,"message":"132","line":145,"column":11,"nodeType":"111","messageId":"112","endLine":145,"endColumn":21},{"ruleId":"109","severity":1,"message":"133","line":151,"column":11,"nodeType":"111","messageId":"112","endLine":151,"endColumn":19},{"ruleId":"109","severity":1,"message":"134","line":186,"column":9,"nodeType":"111","messageId":"112","endLine":186,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":203,"column":6,"nodeType":"127","endLine":203,"endColumn":12,"suggestions":"135"},{"ruleId":"109","severity":1,"message":"136","line":6,"column":7,"nodeType":"111","messageId":"112","endLine":6,"endColumn":9},{"ruleId":"109","severity":1,"message":"137","line":7,"column":7,"nodeType":"111","messageId":"112","endLine":7,"endColumn":9},{"ruleId":"109","severity":1,"message":"136","line":6,"column":7,"nodeType":"111","messageId":"112","endLine":6,"endColumn":9},{"ruleId":"109","severity":1,"message":"137","line":7,"column":7,"nodeType":"111","messageId":"112","endLine":7,"endColumn":9},{"ruleId":"109","severity":1,"message":"136","line":6,"column":7,"nodeType":"111","messageId":"112","endLine":6,"endColumn":9},{"ruleId":"109","severity":1,"message":"137","line":7,"column":7,"nodeType":"111","messageId":"112","endLine":7,"endColumn":9},{"ruleId":"138","severity":1,"message":"139","line":16,"column":1,"nodeType":"140","endLine":110,"endColumn":2},{"ruleId":"125","severity":1,"message":"141","line":103,"column":6,"nodeType":"127","endLine":103,"endColumn":24,"suggestions":"142"},"no-unused-vars","'Circle' is defined but never used.","Identifier","unusedVar","'Line' is defined but never used.","'Bar' is defined but never used.","'TimeLine' is defined but never used.","'BarChart' is defined but never used.","'gamesCopy' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","no-native-reassign",["143"],"no-negated-in-lhs",["144"],"'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'readData'. Either include it or remove the dependency array.","ArrayExpression",["145"],["146"],["143"],["144"],"'nodeUpdate' is assigned a value but never used.","'nodeExit' is assigned a value but never used.","'fill' is assigned a value but never used.",["147"],"'dx' is assigned a value but never used.","'dy' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'previouslyRenderedData'. Either include it or remove the dependency array.",["148"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [readData]",{"range":"157","text":"158"},"Update the dependencies array to be: [games, readData]",{"range":"159","text":"160"},"Update the dependencies array to be: [data, readData]",{"range":"161","text":"162"},"Update the dependencies array to be: [dimensions, data, previouslyRenderedData]",{"range":"163","text":"164"},[2676,2678],"[readData]",[2722,2729],"[games, readData]",[5513,5519],"[data, readData]",[2576,2594],"[dimensions, data, previouslyRenderedData]"]